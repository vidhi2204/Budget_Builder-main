@{
    ViewData["Title"] = "Home Page";
}

<div id="delete-category" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <img src="../images/toppng.com-warning-icon-2400x2400.png" width="50px" alt="">
                    <p>Are you sure you want to Delete this category?</p>
                    <input type="hidden" id="cat-index">
                    <input type="hidden" id="is-income">

                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-primary" onclick="deleteCategory()">Yes</a>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div id="reset-sheet" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reset confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">
                    <p>Are you sure you want to Reset sheet?</p>
                </div>

            </div>
            <div class="modal-footer d-flex justify-content-center">
                <a type="submit" class="btn btn-primary" onclick="resetSheet()">Yes</a>
                <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div id="apply-to-all" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header ">
                <h5 class="modal-title">Apply to All</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body ">
                <div class="delete-cat-image d-flex flex-column  align-items-center">

                    <p class="text-center">Are you sure you want apply this value to specific months of this category?
                    </p>
                    <input type="hidden" id="cat-index-apply">
                    <input type="hidden" id="value-apply">
                    <input type="hidden" id="is-income-apply">
                    <input type="hidden" id="month-apply">
                </div>

            </div>
            <div class="modal-footer d-flex  justify-content-center">
                <a type="submit" class="btn btn-outline-dark" onclick="applyTOAll()" style="width: 200px;">Apply to
                    all</a>
                <a type="submit" class="btn btn-outline-dark" onclick="applyBefore()" style="width: 200px;">Apply Before
                    this date</a>
                <a type="submit" class="btn btn-outline-dark" onclick="applyAfter()" style="width: 200px;">Apply After
                    this date</a>
                <button type="button" class="btn btn-outline-dark" data-bs-dismiss="modal"
                    style="width: 200px;">Cancel</button>
            </div>
        </div>
    </div>
</div>


<div class="row p-3 ">
    <div class="input-div rounded  p-2" style="background-color: #d7dcdd">
        <div class="title-text text-color fs-3 fw-bold">Budget Calculator</div>
        <div class="d-flex justify-content-start mb-2 row">
            <div class="form-floating me-3 col-2">
                <input type="date" id="startDate" placeholder="Start date" class="m-2 w-100 form-control p-2 ">
                <label for="startDate" class="ms-3"> Start Date</label>
            </div>
            <div class="form-floating me-3 col-2">
                <input type="date" id="endDate" class="m-2 w-100 form-control p-2 " placeholder="End date">
                <label for="endDate" class="ms-3">End Date</label>
            </div>
            <div class="btn button-solid m-2 d-flex align-items-center col-1" onclick="generate()">Generate</div>
            <button class="btn btn-secondary m-2 d-flex align-items-center col-1" id="reset-button-id"
                data-bs-toggle="modal" data-bs-target="#reset-sheet" disabled>Reset</button>
            <button class="btn btn-secondary m-2 d-flex align-items-center col-1" id="export-id" onclick="ExportSheet()"
                disabled>Export</button>
            <button class="btn btn-secondary m-2 d-flex align-items-center col-1" id="activity-button"
                onclick="activityToggle()" disabled>Activity</button>


        </div>
        <div class="d-flex justify-content-start row ms-1"><input type="file" id="import-file-id" class="col-2">

            <button class="btn btn-secondary m-2 d-flex align-items-center col-2" onclick="ImportData()">Import</button>
        </div>
    </div>

    <div class="activity-main-div rounded mt-4  d-none"
        style="background-color: #d7dcdd; max-height: 400px; overflow : auto;">
        <div class="text-color mt-2 mb-2 fs-3 fw-bold">Recent Activity <span class="btn ms-3 btn-secondary "
                onclick="ExportActivity()">Export</span></div>
        <ul id="activity-list">

        </ul>
    </div>

    <div class="data-entries  rounded mt-4 " style="background-color: #d7dcdd">
        <div id="Budget-Sheet-data" class="table-main-div">

        </div>
    </div>
    <div class="d-none" id="exportActivityTable"></div>
    <div class="d-none" id="exportTablediv"></div>

</div>


@section Scripts {
    @* <script src="table2excel.js"></script> *@
    <script>
        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;
        var monthArray = [];
        var demoLabels = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var datasheetVM;
        var timeArray = [];
        var colorArray = [];
        var messageArray = [];
        var IsChangeAfterExport = true;

        //check validation of dates input and call generate sheet
        function generate() {
            startDate = document.getElementById("startDate").value;
            endDate = document.getElementById("endDate").value;

            if (!startDate || !endDate) {
                errorToaster("Please select both start date and end date.");
                return;
            }

            if (endDate < startDate) {
                errorToaster("End date should be greater than Start date.");
                document.getElementById("endDate").value = "";
                return;
            }
            datasheetVM = {
                monthList: [],
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: [],
                totalExpense: [],
                profitLoss: [],
                openingBalance: [],
                closingBalance: []
            };
            timeArray = [];
            colorArray = [];
            messageArray = [];
            IsChangeAfterExport = true;
            generateMonths(startDate, endDate);
        }

        //calculate months from start and end datee
        function generateMonths(srartDate, endDate) {
            monthArray = [];
            IsChangeAfterExport = true;
            var startDateList = startDate.split("-")
            var endDateList = endDate.split("-")

            if (startDateList[0] != endDateList[0]) {
                var differenceYear = parseInt(endDateList[0]) - parseInt(startDateList[0]);
                for (i = 0; i <= differenceYear; i++) {
                    if (i == 0) {
                        for (j = parseInt(startDateList[1]) - 1; j < demoLabels.length; j++) {
                            monthArray.push(demoLabels[j] + "-" + (parseInt(startDateList[0]) + i).toString());
                        }
                    }
                    else if (i == differenceYear) {
                        for (j = 0; j < parseInt(endDateList[1]); j++) {
                            monthArray.push(demoLabels[j] + "-" + (parseInt(startDateList[0]) + i).toString());
                        }
                    }
                    else {
                        for (j = 0; j < demoLabels.length; j++) {
                            monthArray.push(demoLabels[j] + "-" + (parseInt(startDateList[0]) + i).toString())
                        }
                    }

                }

            }
            else if (startDateList[0] == endDateList[0]) {
                for (let i = parseInt(startDateList[1]); i <= parseInt(endDateList[1]); i++) {
                    monthArray.push(demoLabels[i - 1] + "-" + startDateList[0]);
                }
            }
            generateBudgetSheet();

        }

        //generate budget sheet - render partial view of sheet
        function generateBudgetSheet() {
            IsChangeAfterExport = true;
            datasheetVM = {
                monthList: monthArray,
                incomeCategoryList: [{
                    catgeoryName: "",
                    amount: new Array(monthArray.length).fill(0)
                }],
                expenseCategoryList: [{
                    catgeoryName: "",
                    amount: new Array(monthArray.length).fill(0)
                }],
                totalIncome: new Array(monthArray.length).fill(0),
                totalExpense: new Array(monthArray.length).fill(0),
                profitLoss: new Array(monthArray.length).fill(0),
                openingBalance: new Array(monthArray.length).fill(0),
                closingBalance: new Array(monthArray.length).fill(0)
            };

            RenderTable(datasheetVM);
            fillActivityArray("blue", "Budget sheet generated for the period " + monthArray[0] + " to " + monthArray[monthArray.length - 1]);
            successToaster("Budget sheet generated successfully");
            document.getElementById("export-id").removeAttribute("disabled");
            document.getElementById("reset-button-id").removeAttribute("disabled");

            //set viewmodel when partial view loads
            datasheetData(datasheetVM);

        }

        //render the table
        function RenderTable(datasheetVM) {
            IsChangeAfterExport = true;
            var BudgetSheetTable = document.getElementById("Budget-Sheet-data");
            BudgetSheetTable.innerHTML = "";

            var row = `<table id="example" class="table display">
                                                                                                                                                                                                            <thead>
                                                                                                                                                                                                                <tr>
                                                                                                                                                                                                                    <th class="headcol">Category</th>`
            datasheetVM.monthList.forEach((month) => {
                row += `<th class="text-center subcol">${month}</th>`;
            })
            row += `<th class="text-center subcol">Delete</th>
                                                                                                                                                                                                                        </tr>
                                                                                                                                                                                                                    </thead>
                                                                                                                                                                                                                    <tbody>
                                                                                                            <!---------------------- expense ------------------>
                                                                                                            <tr>
                                                                                                                <td class="fw-bold headcol">Income</td>
                                                                                                                <td  colspan="${datasheetVM.monthList.length + 1}" class="subcol"></td>
                                                                                                            </tr>
                                                                                                        </tbody>

                                                                                                                                                                                                                    <tbody id="income-data-id">`
            datasheetVM.incomeCategoryList.forEach((income, incomeIndex) => {
                row += `<tr>
                                                                                                                                                                                                        <td class="headcol"><input type="text" placeholder="Enter Income" value="${income.catgeoryName}"
                                                                                                                                                                                                                data-incomeindex="${incomeIndex}" class="IncomeName inputClass" ${(income.catgeoryName == "" ? "" :
                        "disabled")}></td>`
                @* for (i = 0; i < datasheetVM.monthList.length; i++)
                { *@
                    datasheetVM.monthList.forEach((month, i) => {
                        row += `<td  class="text-center subcol table-data-class"><input type="number" value="${income.amount[i]}" class="IncomeInput inputClass input-data-number" data-month="${i}"
                                                                                                                                                                                                                        data-incomeindex="${incomeIndex}">
                                                                                                                                                                                                                        <input type="hidden"  class="monthIncomeH" value="${i}">
                                                                                                                                                                                                                        <input type="hidden" class="incomeindexH" value="${incomeIndex}">
                                                                                                                                                                                                                        </td>`
                    })
                row += `<td class="text-center subcol inputClass"><i class="bi bi-trash text-danger deletedata inputClass" data-index="${incomeIndex}"
                                                                                                                                                                                                                data-isincome="true"></i>
                                                                                                                                                                                                                <input type="hidden" class="indexIncomeH" value="${incomeIndex}">
                                                                                                                                                                                                        </td>
                                                                                                                                                                                                    </tr>`
                incomeIndex++;
            })

            row += `</tbody>
                                                                                                                                                                                                        <tbody>
                                                                                                                                                                                                            <tr>
                                                                                                                                                                                                                <td class="fw-bold headcol">Total Income</td>`
            datasheetVM.totalIncome.forEach((income) => {
                row += `<td  class="text-center subcol"><input type="text" value="${income}" disabled class="TotalIncome"></td>`;
            })

            row += `<td></td>
                                                                                                                                                                                                </tr>
                                                                                                                                                                                            </tbody>
                                                                                                                                                                                            <tbody>
                                                                                                                                                                                                <!---------------------- expense ------------------>
                                                                                                                                                                                                <tr>
                                                                                                                                                                                                    <td class="fw-bold headcol">Expense</td>
                                                                                                                                                                                                    <td  colspan="${datasheetVM.monthList.length + 1}" class="subcol"></td>
                                                                                                                                                                                                </tr>
                                                                                                                                                                                            </tbody>
                                                                                                                                                                                            <tbody id="expense-data-id">`



            datasheetVM.expenseCategoryList.forEach((expense, expenseIndex) => {
                row += `<tr >
                                                                                                                                                                                                        <td class="headcol"><input type="text" placeholder="Enter Expense" value="${expense.catgeoryName}"
                                                                                                                                                                                                                data-expenseindex="${expenseIndex}" class="ExpenseName inputClass" ${(expense.catgeoryName == "" ? "" :
                        "disabled")}></td>`
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    row += `<td  class="text-center subcol table-data-class"><input type="number" value="${expense.amount[i]}" class="ExpenseInput inputClass input-data-number" data-month="${i}"
                                                                                                                                                                                                                    data-expenseindex="${expenseIndex}">
                                                                                                                                                                                                                    <input type="hidden"  class="monthExpenseH" value="${i}">
                                                                                                                                                                                                                    <input type="hidden" class="expenseindexH" value="${expenseIndex}">
                                                                                                                                                                                                                    </td>`
                }
                row += `<td class="text-center subcol "><i class="bi bi-trash text-danger deletedata inputClass" data-index="${expenseIndex}"
                                                                                                                                                                                                                data-isincome="false"></i>
                                                                                                                                                                                                                <input type="hidden" class="indexExpenseH" value="${expenseIndex}">
                                                                                                                                                                                                        </td>
                                                                                                                                                                                                    </tr>`
                expenseIndex++;
            })

            row += `</tbody>
                                                                                                                                                                                                        <tbody>
                                                                                                                                                                                                            <tr>
                                                                                                                                                                                                                <td class="fw-bold headcol">Total Expense</td>`
            datasheetVM.totalExpense.forEach((expense) => {
                row += `<td  class="text-center subcol"><input type="text" value="${expense}" disabled class="TotalExpense"></td>`;
            })
            row += `<td class="subcol"></td>
                                                                                                                                                                                        </tr>
                                                                                                                                                                                    </tbody>

                                                                                                                                                                                    <tbody>
                                                                                                                                                                                        <!-----------------------  summary title----------------->
                                                                                                                                                                                        <tr>
                                                                                                                                                                                            <td class="fw-bold headcol">Summary</td>
                                                                                                                                                                                            <td colspan="${datasheetVM.monthList.length}" class="subcol"></td>
                                                                                                                                                                                        </tr>
                                                                                                                                                                                        <!-----------------------  Profit/Loss<---------------->
                                                                                                                                                                                        <tr>
                                                                                                                                                                                            <td class="fw-bold headcol">Profit/Loss</td>`

            datasheetVM.profitLoss.forEach((profit) => {
                row += `<td class="text-center subcol"><input type="text" value="${profit}" disabled class="ProfitLoss"></td>`;
            })

            row += `<td class="subcol"></td>
                                                                                                                                                                                        </tr>

                                                                                                                                                                                        <!----------------------- Opening Balance----------------->
                                                                                                                                                                                        <tr>
                                                                                                                                                                                            <td class="fw-bold headcol">Opening Balance</td>`;

            datasheetVM.openingBalance.forEach((opening) => {
                row += `<td class="text-center subcol"><input type="text" value="${opening}" disabled class="OpeningBalance"></td>`;
            })

            row += `<td class="subcol"></td>
                                                                                                                                                                                        </tr>

                                                                                                                                                                                        <!-----------------------Closing Balance----------------->
                                                                                                                                                                                        <tr>
                                                                                                                                                                                            <td class="fw-bold headcol">Closing Balance</td>`;

            datasheetVM.closingBalance.forEach((closing) => {
                row += `<td class="text-center subcol"><input type="text" value="${closing}" disabled class="ClosingBalance"></td>`;
            })

            row += `<td class="subcol"></td>
                                                                                                                                                                                        </tr>

                                                                                                                                                                                    </tbody>
                                                                                                                                                                                </table>`;

            BudgetSheetTable.innerHTML = row;
        }

        //set viewmodel when partial view loads
        function datasheetData(datasheetData) {
            datasheetVM = datasheetData;
            console.log("datasheetVM", datasheetVM);
        }

        //update calculations
        function updateBudgetSheet() {
            IsChangeAfterExport = true;

            for (i = 0; i < datasheetVM.monthList.length; i++) {
                datasheetVM.totalIncome[i] = 0;
                datasheetVM.totalExpense[i] = 0;
                datasheetVM.profitLoss[i] = 0;
                datasheetVM.openingBalance[i] = 0;
                datasheetVM.closingBalance[i] = 0;
            }
            for (i = 0; i < datasheetVM.incomeCategoryList.length; i++) {
                for (j = 0; j < datasheetVM.monthList.length; j++) {
                    datasheetVM.totalIncome[j] += datasheetVM.incomeCategoryList[i].amount[j];
                }
            }
            for (i = 0; i < datasheetVM.expenseCategoryList.length; i++) {
                for (j = 0; j < datasheetVM.monthList.length; j++) {
                    datasheetVM.totalExpense[j] += datasheetVM.expenseCategoryList[i].amount[j];
                }
            }

            for (i = 0; i < datasheetVM.monthList.length; i++) {
                datasheetVM.profitLoss[i] = datasheetVM.totalIncome[i] - datasheetVM.totalExpense[i];
                if (i == 0) {
                    datasheetVM.openingBalance[i] = 0;
                }
                else {
                    datasheetVM.openingBalance[i] = datasheetVM.closingBalance[i - 1];
                }
                datasheetVM.closingBalance[i] = datasheetVM.openingBalance[i] + datasheetVM.profitLoss[i];


                //update in UI

                document.querySelectorAll(".TotalIncome")[i].value = datasheetVM.totalIncome[i];
                document.querySelectorAll(".TotalExpense")[i].value = datasheetVM.totalExpense[i];
                document.querySelectorAll(".ProfitLoss")[i].value = datasheetVM.profitLoss[i];
                document.querySelectorAll(".OpeningBalance")[i].value = datasheetVM.openingBalance[i];
                document.querySelectorAll(".ClosingBalance")[i].value = datasheetVM.closingBalance[i];

            }

        }

        //update sheet on add delete
        function renderIncomeExpenseBody(isIncome) {
            IsChangeAfterExport = true;
            if (isIncome) {
                var incomeBody = document.getElementById("income-data-id");
                incomeBody.innerHTML = "";
                var row = "";
                datasheetVM.incomeCategoryList.forEach((income, incomeIndex) => {
                    row += `<tr>
                                                                                                                                                                                                        <td class="headcol"><input type="text" placeholder="Enter Income" value="${income.catgeoryName}"
                                                                                                                                                                                                                data-incomeindex="${incomeIndex}" class="IncomeName inputClass" ${(income.catgeoryName == "" ? "" :
                            "disabled")}></td>`

                    datasheetVM.monthList.forEach((month, i) => {
                        row += `<td  class="text-center subcol table-data-class"><input type="number" value="${income.amount[i]}" class="IncomeInput inputClass input-data-number" data-month="${i}"
                                                                                                                                                                                                                        data-incomeindex="${incomeIndex}">
                                                                                                                                                                                                                        <input type="hidden"  class="monthIncomeH" value="${i}">
                                                                                                                                                                                                                        <input type="hidden" class="incomeindexH" value="${incomeIndex}">
                                                                                                                                                                                                                        </td>`
                    })
                    row += `<td class="text-center subcol inputClass"><i class="bi bi-trash text-danger deletedata inputClass" data-index="${incomeIndex}"
                                                                                                                                                                                                                data-isincome="true"></i>
                                                                                                                                                                                                                <input type="hidden" class="indexIncomeH" value="${incomeIndex}">
                                                                                                                                                                                                        </td>
                                                                                                                                                                                                    </tr>`
                    incomeIndex++;
                });

                incomeBody.innerHTML = row;
            } else {
                var expenseBody = document.getElementById("expense-data-id");
                expenseBody.innerHTML = "";
                var row = "";
                datasheetVM.expenseCategoryList.forEach((expense, expenseIndex) => {
                    row += `<tr >
                                                                                                                                                                                                        <td class="headcol"><input type="text" placeholder="Enter Expense" value="${expense.catgeoryName}"
                                                                                                                                                                                                                data-expenseindex="${expenseIndex}" class="ExpenseName inputClass" ${(expense.catgeoryName == "" ? "" :
                            "disabled")}></td>`
                    for (i = 0; i < datasheetVM.monthList.length; i++) {
                        row += `<td  class="text-center subcol table-data-class"><input type="number" value="${expense.amount[i]}" class="ExpenseInput inputClass input-data-number" data-month="${i}"
                                                                                                                                                                                                                    data-expenseindex="${expenseIndex}">
                                                                                                                                                                                                                    <input type="hidden"  class="monthExpenseH" value="${i}">
                                                                                                                                                                                                                    <input type="hidden" class="expenseindexH" value="${expenseIndex}">
                                                                                                                                                                                                                    </td>`
                    }
                    row += `<td class="text-center subcol "><i class="bi bi-trash text-danger deletedata inputClass" data-index="${expenseIndex}"
                                                                                                                                                                                                                data-isincome="false"></i>
                                                                                                                                                                                                                <input type="hidden" class="indexExpenseH" value="${expenseIndex}">
                                                                                                                                                                                                        </td>
                                                                                                                                                                                                    </tr>`
                    expenseIndex++;
                })

                expenseBody.innerHTML = row;
            }
        }

        //delete category
        function deleteCategory() {
            IsChangeAfterExport = true;
            var index = document.getElementById("cat-index").value;
            var isIncome = document.getElementById("is-income").value == "true" ? true : false;
            var catgeoryName = isIncome ? datasheetVM.incomeCategoryList[index].catgeoryName : datasheetVM.expenseCategoryList[index].catgeoryName;
            var section = isIncome ? "Income" : "Expense";
            if (isIncome) {
                datasheetVM.incomeCategoryList.splice(index, 1);
                if (datasheetVM.incomeCategoryList.length == 0) {
                    addCategory(true);

                }
            } else {
                datasheetVM.expenseCategoryList.splice(index, 1);
                if (datasheetVM.expenseCategoryList.length == 0) {
                    addCategory(false);

                }
            }
            RenderTable(datasheetVM);
            fillActivityArray("red", `${catgeoryName} category is deleted from ${section} Section`);
            updateBudgetSheet();
            successToaster("Category deleted successfully");
            $('.btn-close').click();

        }

        //add new category
        function addCategory(isIncome) {
            IsChangeAfterExport = true;
            if (isIncome) {
                var newCategory = {
                    catgeoryName: "",
                    amount: new Array(datasheetVM.monthList.length).fill(0)
                };
                datasheetVM.incomeCategoryList.push(newCategory);
                renderIncomeExpenseBody(true)
            } else {
                var newCategory = {
                    catgeoryName: "",
                    amount: new Array(datasheetVM.monthList.length).fill(0)
                };
                datasheetVM.expenseCategoryList.push(newCategory);
                renderIncomeExpenseBody(false);
            }
            if (isIncome) {
                document.getElementsByClassName("IncomeName")[datasheetVM.incomeCategoryList.length - 1].focus();
            } else {
                document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
            }

        }

        //reset budget sheet
        function resetSheet() {
            if (IsChangeAfterExport) {
                ExportSheet();
            }
            document.getElementById("export-id").setAttribute("disabled", "disabled");
            document.getElementById("reset-button-id").setAttribute("disabled", "disabled");
            document.getElementById("activity-button").setAttribute("disabled", "disabled");


            document.getElementById("startDate").value = "";
            document.getElementById("endDate").value = "";
            monthArray = [];
            datasheetVM = {
                monthList: [],
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: [],
                totalExpense: [],
                profitLoss: [],
                openingBalance: [],
                closingBalance: []
            };
            timeArray = [];
            colorArray = [];
            messageArray = [];
            $("#Budget-Sheet-data").html("");
            $(".btn-close").click();
            successToaster("The budget Sheet has benn initialized.");
            IsChangeAfterExport = false;
        }

        //apply value to all months
        function applyTOAll() {
            IsChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            console.log("catIndex", catIndex)
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            if (isincome == "true") {
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray("green", `${value}Rs has been added to all months of Income category  ${datasheetVM.incomeCategoryList[catIndex].catgeoryName}`);
            } else {
                for (i = 0; i < datasheetVM.monthList.length; i++) {
                    console.log("expense", datasheetVM.expenseCategoryList)
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray("green", `${value}Rs has been added to all months of Expense category ${datasheetVM.expenseCategoryList[catIndex].catgeoryName}`);
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //function to apply value before a specific month
        function applyBefore() {
            IsChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            var month = parseInt(document.getElementById("month-apply").value);

            if (isincome == "true") {
                for (i = 0; i < month; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray("green", `${value}Rs has been added to all months of Income category ${datasheetVM.incomeCategoryList[catIndex].catgeoryName} before ${datasheetVM.monthList[month]}`);
            } else {
                for (i = 0; i < month; i++) {
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray("green", `${value}Rs has been added to all months of Expense category ${datasheetVM.expenseCategoryList[catIndex].catgeoryName} before ${datasheetVM.monthList[month]}`);
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //function to apply value after a specific month
        function applyAfter() {
            IsChangeAfterExport = true;
            var catIndex = document.getElementById("cat-index-apply").value;
            var value = document.getElementById("value-apply").value;
            var isincome = document.getElementById("is-income-apply").value;
            var month = parseInt(document.getElementById("month-apply").value);

            if (isincome == "true") {
                for (i = month; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.incomeCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(true)
                fillActivityArray("green", `${value}Rs has been added to all months of Income category ${datasheetVM.incomeCategoryList[catIndex].catgeoryName} after ${datasheetVM.monthList[month]}`);
            } else {
                for (i = month; i < datasheetVM.monthList.length; i++) {
                    datasheetVM.expenseCategoryList[catIndex].amount[i] = parseInt(value);
                }
                renderIncomeExpenseBody(false)
                fillActivityArray("green", `${value}Rs has been added to all months of Expense category ${datasheetVM.expenseCategoryList[catIndex].catgeoryName} after ${datasheetVM.monthList[month]}`);
            }
            updateBudgetSheet();
            $(".btn-close").click();
        }

        //extract data from table to gemerate excel file
        function extractData(tableId, isDeleteCol = false) {
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll("tr");
            const data = [];

            rows.forEach((row) => {
                const rowData = [];
                const cells = row.querySelectorAll("th, td");
                const length = isDeleteCol ? cells.length - 1 : cells.length;

                for (i = 0; i < length; i++) {
                    const cell = cells[i];
                    const input = cell.querySelector("input");
                    if (input) {
                        rowData.push(input.value);
                    } else {
                        rowData.push(cell.innerText.trim());
                    }
                }
                data.push(rowData);
            });
            return data;
        }

        //export budgetsheet and activity sheet to excel
        function ExportSheet() {
            var table = `<table id=activity-table>
                                                                                                                            <thead>
                                                                                                                                <tr>
                                                                                                                                    <th>Time</th>
                                                                                                                                    <th>Message</th>
                                                                                                                                </tr>
                                                                                                                            </thead>
                                                                                                                            <tbody>`;
            for (i = 0; i < messageArray.length; i++) {
                table += `<tr>
                                                                                                                                    <td>${timeArray[i]}</td>
                                                                                                                                    <td>${messageArray[i]}</td>
                                                                                                                                </tr>`;
            }
            table += `</tbody>
                                                                                                                        </table>`;

            document.getElementById("exportActivityTable").innerHTML = table;


            var budgetSheetData = extractData("example", true);
            var activityData = extractData("exportActivityTable", false);

            const workbook = XLSX.utils.book_new();

            const worksheet1 = XLSX.utils.aoa_to_sheet(budgetSheetData);
            const worksheet2 = XLSX.utils.aoa_to_sheet(activityData);


            XLSX.utils.book_append_sheet(workbook, worksheet1, "Budget");
            XLSX.utils.book_append_sheet(workbook, worksheet2, "Activity");

            XLSX.writeFile(workbook, "BudgetSheet.xlsx");
            IsChangeAfterExport = false;

        }


        //export activity to excel
        function ExportActivity() {
            if (timeArray.length == 0) {
                errorToaster("No activity found to export");
                return;
            }
            else {
                var table = `<table id=activity-table>
                                                                                                                            <thead>
                                                                                                                                <tr>
                                                                                                                                    <th>Time</th>
                                                                                                                                    <th>Message</th>
                                                                                                                                </tr>
                                                                                                                            </thead>
                                                                                                                            <tbody>`;
                for (i = 0; i < messageArray.length; i++) {
                    table += `<tr>
                                                                                                                                    <td>${timeArray[i]}</td>
                                                                                                                                    <td>${messageArray[i]}</td>
                                                                                                                                </tr>`;
                }
                table += `</tbody>
                                                                                                                        </table>`;
            }
            document.getElementById("exportActivityTable").innerHTML = table;
            var table = document.getElementById("activity-table");
            var workbook = XLSX.utils.table_to_book(table, { sheet: "activity" });
            var filename = "BudgetSheet.xlsx";
            XLSX.writeFile(workbook, filename);
            successToaster("Activity exported successfully");
        }

        //user activity
        function fillActivityArray(color, messgae) {
            IsChangeAfterExport = true;
            document.getElementById("activity-button").removeAttribute("disabled");

            var today = new Date();
            var date = today.toLocaleDateString("en-US");
            var time = today.toLocaleTimeString("en-US");
            var currentTime = date + " " + time;

            timeArray.push(currentTime);
            colorArray.push(color);
            messageArray.push(messgae);
        }

        //activity toggle
        function activityToggle() {
            document.getElementsByClassName("activity-main-div")[0].classList.toggle("d-none");
            if (document.getElementsByClassName("activity-main-div")[0].classList.contains("d-none")) {
                $(".inputClass").prop("disabled", false);
            } else {
                $(".inputClass").prop("disabled", true);
            }
            displayActivity();
        }

        //display activity
        function displayActivity() {

            var activityList = document.getElementById("activity-list");
            activityList.innerHTML = "";

            if (timeArray.length == 0) {
                activityList.innerHTML = `<li style="list-style: none; display: flex; align-items: center; margin-bottom: 10px; font-size: 14px;">No Activity Found</li>`;
                document.getElementById("activity-list").innerHTML = activityList.innerHTML;
                return;
            }
            for (var i = timeArray.length - 1; i >= 0; i--) {

                activityList.innerHTML += `<li style="list-style: none; display: flex; align-items: center; margin-bottom: 10px; font-size: 14px;">
                                                                                                                                                                            <span class="text-secondary me-3 fw-bold">${timeArray[i]}</span>
                                                                                                                                                                            <span class="dot ${colorArray[i]} me-3"></span>
                                                                                                                                                                            <span class="text-dark fw-semibold">${messageArray[i]}</span>
                                                                                                                                                                        </li>`;
            }
            document.getElementById("activity-list").innerHTML = activityList.innerHTML;
        }

        //import data fromexcel
        function ImportData() {
            /* var file = document.getElementById("import-file-id").files[0];
            if (!file) {
                errorToaster("Please select a file to import.");
                return;
            }
            const reader = new FileReader();
            reader.onload = (event) => {
                const data = new Uint8Array(event.target.result);
                const workbook = XLSX.read(data, { type: 'array' });

                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const jsonData = XLSX.utils.sheet_to_json(worksheet);

                console.log("imported data"jsonData); // Array of JSON objects
            };

            reader.readAsArrayBuffer(file); */
        }

    </script>



    <script>
        const fileInput = document.getElementById('import-file-id');
        var importedArray = [];
        var importedMonths = [];

        $(document).ready(function () {

        fileInput.addEventListener('change', (e) => {
       
        const file = e.target.files[0];
        const reader = new FileReader();

        reader.onload = (event) => {
            const data = new Uint8Array(event.target.result);
            const workbook = XLSX.read(data, { type: 'array' });

            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet);

            console.log("hiii", jsonData); // Array of JSON objects

            for (let i = 0; i < jsonData.length; i++) {
                importedArray.push(jsonData[i]);
                console.log(i, "---", jsonData[i].Category)
            }

            const montharrayTemp = Object.keys(jsonData[1]).filter(key => key !== "Category");
            console.log("months", montharrayTemp)
            
            let datasheetVMdata = {
                monthList: montharrayTemp,
                incomeCategoryList: [],
                expenseCategoryList: [],
                totalIncome: new Array(montharrayTemp.length).fill(0),
                totalExpense: new Array(montharrayTemp.length).fill(0),
                profitLoss: new Array(montharrayTemp.length).fill(0),
                openingBalance: new Array(montharrayTemp.length).fill(0),
                closingBalance: new Array(montharrayTemp.length).fill(0)
            };

            @* for(let i=0 ; i< montharrayTemp.length; i++){
                datasheetVMdata.monthList.push(montharrayTemp[i]);
            } *@

            let count = 0;

            for (let i = 0; i < jsonData.length; i++) {
                if (jsonData[i].Category == "Income") {
                    count++;
                } else if (jsonData[i].Category == "Total Income") {
                    count ++;
                    break;
                } else {
                    datasheetVMdata.incomeCategoryList.push({
                        catgeoryName: jsonData[i].Category,
                        amount: montharrayTemp.map(month => parseInt(jsonData[i][month]) || 0)
                    });
                    count++;
                }
            }

            for (let i = count ; i < jsonData.length; i++) {
                if (jsonData[i].Category == "Expense") {
                    count++;
                } else if (jsonData[i].Category == "Total Expense") {
                    break;
                } else {
                    datasheetVMdata.expenseCategoryList.push({
                        catgeoryName: jsonData[i].Category,
                        amount: montharrayTemp.map(month => parseInt(jsonData[i][month]) || 0)
                    });
                }
            }
            datasheetData(datasheetVMdata);
            RenderTable(datasheetVM);
            setTimeout(() => {
                updateBudgetSheet();
                successToaster("Data imported successfully");
                fillActivityArray("green", "Data imported from excel file");
            }, 1000);

        };

        reader.readAsArrayBuffer(file);
    });


        //start date validations
        $("#startDate").on("change", function () {
            startDate = document.getElementById("startDate").value;
            endDateInput = document.getElementById("endDate").value;

            if (endDateInput == "") return;
            if (endDateInput < startDate) {
                errorToaster("End date should be greater than Start date.");
                endDate = "";
                document.getElementById("endDate").value = "";
            }
        })

        //enddate validations
        $("#endDate").on("change", function () {
            startDate = document.getElementById("startDate").value;
            endDate = document.getElementById("endDate").value;

            if (endDate < startDate) {
                errorToaster("End date should be greater than Start date");
                document.getElementById("endDate").value = "";
                endDate = "";
            }
        })

        //change income category name
        $(document).on("input", ".IncomeName", function () {
            var catIndex = $(this).data("incomeindex");
            var value = $(this).val();
            IsChangeAfterExport = true;

        });

        //disable income name category
        $(document).on("change", ".IncomeName", function () {
            IsChangeAfterExport = true;
            var value = $(this).val();
            var catIndex = $(this).data("incomeindex");
            for (i = 0; i < datasheetVM.incomeCategoryList.length; i++) {
                if (datasheetVM.incomeCategoryList[i].catgeoryName == value) {
                    errorToaster("Category Already exist.")
                    this.value = "";
                    value = "";
                    this.focus();
                    return;
                }
            }
            datasheetVM.incomeCategoryList[catIndex].catgeoryName = value;
            updateBudgetSheet();
            this.setAttribute("disabled", "disabled");
            fillActivityArray("green", `${value} category is Added under Income Section `);
        });

        //change expense category name
        $(document).on("input", ".ExpenseName", function () {
            var catIndex = $(this).data("expenseindex");
            var value = $(this).val();

        });

        //disable expense name category
        $(document).on("change", ".ExpenseName", function () {
            IsChangeAfterExport = true;
            var value = $(this).val();
            var catIndex = $(this).data("expenseindex");
            for (i = 0; i < datasheetVM.expenseCategoryList.length; i++) {
                if (datasheetVM.expenseCategoryList[i].catgeoryName == value) {
                    errorToaster("Category Already exist.")
                    this.value = "";
                    value = "";
                    this.focus();
                    return;
                }
            }
            datasheetVM.expenseCategoryList[catIndex].catgeoryName = value;
            updateBudgetSheet();
            this.setAttribute("disabled", "disabled");
            fillActivityArray("green", `${value} category is Added under Expense Section `);
        });

        //change income input
        $(document).on("input", ".IncomeInput", function () {
            var amountindex = $(this).data("month");
            var catIndex = $(this).data("incomeindex");
            var value = $(this).val() == "" ? 0 : parseInt($(this).val());
            this.value = $(this).val() == "" ? 0 : parseInt($(this).val());

            datasheetVM.incomeCategoryList[catIndex].amount[amountindex] = parseInt(value);
            updateBudgetSheet();
        });

        //change expense input
        $(document).on("input", ".ExpenseInput", function () {
            var amountindex = $(this).data("month");
            var catIndex = $(this).data("expenseindex");
            var value = $(this).val() == "" ? 0 : parseInt($(this).val());
            this.value = $(this).val() == "" ? 0 : parseInt($(this).val());
            datasheetVM.expenseCategoryList[catIndex].amount[amountindex] = parseInt(value);
            updateBudgetSheet();
        });

        $(document).on("change", ".IncomeInput", function () {
            amountindex = $(this).data("month");
            var catIndex = $(this).data("incomeindex");
            var value = $(this).val() == "" ? 0 : parseInt($(this).val());


            var catgeoryName = datasheetVM.incomeCategoryList[catIndex].catgeoryName;
            fillActivityArray("green", `${value} Rs has been added to ${catgeoryName} for Income ${monthArray[amountindex]}`);
        });

        $(document).on("change", ".ExpenseInput", function () {
            amountindex = $(this).data("month");
            var catIndex = $(this).data("expenseindex");
            var value = $(this).val() == "" ? 0 : parseInt($(this).val());
            var catgeoryName = datasheetVM.expenseCategoryList[catIndex].catgeoryName;
            fillActivityArray("green", `${value} Rs has been added to ${catgeoryName} for Expense ${monthArray[amountindex]}`);
        });

        //delete category
        $(document).on("click", ".deletedata", function () {
            var index = $(this).data("index");
            var isIncome = $(this).data("isincome");
            document.getElementById("cat-index").value = index;
            document.getElementById("is-income").value = isIncome;
            $("#delete-category").modal("show");
        });

        //add new category on enter key press or update if not
        $(document).on("keydown", ".inputClass", function (e) {
            if (e.keyCode == 13) {
                if (e.target.classList.contains("IncomeName") || e.target.classList.contains("IncomeInput")) {
                    if (datasheetVM.incomeCategoryList[datasheetVM.incomeCategoryList.length - 1].catgeoryName == "") {
                        document.getElementsByClassName("IncomeName")[datasheetVM.incomeCategoryList.length - 1].focus();
                    } else {
                        addCategory(true);
                    }
                } else {
                    if (datasheetVM.expenseCategoryList[datasheetVM.expenseCategoryList.length - 1].catgeoryName == "") {
                        document.getElementsByClassName("ExpenseName")[datasheetVM.expenseCategoryList.length - 1].focus();
                    } else {
                        addCategory(false);
                    }
                }
            } else {
                updateBudgetSheet();
            }
        });

        //applu to all when right clicked
        $(document).on("contextmenu", ".input-data-number", function (e) {
            e.preventDefault();
            var catIndex;
            if (this.classList.contains("IncomeInput")) {
                catIndex = $(this).data("incomeindex")
            } else {
                catIndex = $(this).data("expenseindex")
            }

            var value = $(this).val();
            var month = $(this).data("month");

            $("#apply-to-all").modal("show");
            document.getElementById("cat-index-apply").value = catIndex;
            document.getElementById("value-apply").value = value;
            document.getElementById("month-apply").value = month;
            if (this.classList.contains("IncomeInput")) {
                document.getElementById("is-income-apply").value = true;
            } else {
                document.getElementById("is-income-apply").value = false;
            }
        })


                })
    </script>

    <partial name="_Toaster" />
}